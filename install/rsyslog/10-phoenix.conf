# Log kernel generated UFW log messages to file
# Templates for all the awesome data we throw into elastic

$ModLoad mmnormalize
$ModLoad omelasticsearch

## Elasticsearch index templates

template(name="fail2ban-index"
  type="list") {
    constant(value="fail2ban-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

template(name="iptables-index"
  type="list") {
    constant(value="iptables-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

template(name="suricata-index"
  type="list") {
    constant(value="suricata-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

template(name="apache2-index"
  type="list") {
    constant(value="apache2-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

template(name="linux-index"
  type="list") {
    constant(value="linux-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

template(name="docker-index"
  type="list") {
    constant(value="docker-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}



## Output format templates

$template RAWMSG, "%rawmsg%\n"
$template MSG, "%msg%\n"

template(name="fail2ban-json"
  type="list") {
    constant(value="{")
        constant(value="\"@timestamp\":\"")     property(name="timereported" dateFormat="rfc3339")
	constant(value="\",\"tag\":\"")           property(name="syslogtag" format="json")
        constant(value="\",\"relayhost\":\"")     property(name="fromhost")
        constant(value="\",\"relayip\":\"")       property(name="fromhost-ip")
        constant(value="\",\"logsource\":\"")     property(name="source")
        constant(value="\",\"hostname\":\"")      property(name="hostname" caseconversion="lower")
        constant(value="\",\"sev\":\"")     property(name="$!sev")
        constant(value="\",\"failrule\":\"")     property(name="$!failrule")
        constant(value="\",\"ip\":\"")     property(name="$!ip")
        constant(value="\",\"action\":\"")     property(name="$!action")
	constant(value="\",\"_raw\":\"")	property(name="rawmsg")
        constant(value="\"}")
}

template(name="iptables-json"
  type="list") {
    constant(value="{")
        constant(value="\"@timestamp\":\"")     property(name="timereported" dateFormat="rfc3339")
	constant(value="\",\"tag\":\"")           property(name="syslogtag" format="json")
        constant(value="\",\"relayhost\":\"")     property(name="fromhost")
        constant(value="\",\"relayip\":\"")       property(name="fromhost-ip")
        constant(value="\",\"logsource\":\"")     property(name="source")
        constant(value="\",\"hostname\":\"")      property(name="hostname" caseconversion="lower")
        constant(value="\",\"iptableschain\":\"")     property(name="$!iptableschain")
        constant(value="\",\"mac\":\"")     property(name="$!mac")
        constant(value="\",\"sport\":\"")     property(name="$!sport")
        constant(value="\",\"src\":\"")     property(name="$!src")
        #constant(value="\",\"src1\":\"")     property(name="$!src1")
        constant(value="\",\"proto\":\"")     property(name="$!proto")
        constant(value="\",\"proto1\":\"")     property(name="$!proto1")
        constant(value="\",\"dport\":\"")     property(name="$!dport")
        constant(value="\",\"dst\":\"")     property(name="$!dst")
        #constant(value="\",\"dst1\":\"")     property(name="$!dst1")
        constant(value="\",\"icmpcode\":\"")     property(name="$!icmpcode")
        constant(value="\",\"icmptype\":\"")     property(name="$!icmptype")
        constant(value="\",\"in\":\"")     property(name="$!in")
        constant(value="\",\"ipid\":\"")     property(name="$!ipid")
        constant(value="\",\"ipid1\":\"")     property(name="$!ipid1")
        constant(value="\",\"len\":\"")     property(name="$!len")
        constant(value="\",\"len1\":\"")     property(name="$!len1")
        constant(value="\",\"len2\":\"")     property(name="$!len2")
        constant(value="\",\"out\":\"")     property(name="$!out")
        constant(value="\",\"prec\":\"")     property(name="$!prec")
        constant(value="\",\"prec1\":\"")     property(name="$!prec1")
        constant(value="\",\"res\":\"")     property(name="$!res")
        constant(value="\",\"seq\":\"")     property(name="$!seq")
        constant(value="\",\"tcpflag1\":\"")     property(name="$!tcpflag1")
        constant(value="\",\"tcpflag2\":\"")     property(name="$!tcpflag2")
        constant(value="\",\"tcpflag3\":\"")     property(name="$!tcpflag3")
        constant(value="\",\"tos\":\"")     property(name="$!tos")
        constant(value="\",\"tos1\":\"")     property(name="$!tos1")
        constant(value="\",\"ttl\":\"")     property(name="$!ttl")
        constant(value="\",\"ttl1\":\"")     property(name="$!ttl1")
        constant(value="\",\"urgp\":\"")     property(name="$!urgp")
        constant(value="\",\"window\":\"")     property(name="$!window")
	#constant(value="\",\"_raw\":\"")	property(name="rawmsg")
        constant(value="\"}\n")
}

template(name="json_syslog"
  type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")       property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"type\":\"syslog_json")
      constant(value="\",\"tag\":\"")           property(name="syslogtag" format="json")
      constant(value="\",\"relayhost\":\"")     property(name="fromhost")
      constant(value="\",\"relayip\":\"")       property(name="fromhost-ip")
      constant(value="\",\"logsource\":\"")     property(name="source")
      constant(value="\",\"hostname\":\"")      property(name="hostname" caseconversion="lower")
      constant(value="\",\"program\":\"")      property(name="programname")
      constant(value="\",\"priority\":\"")      property(name="pri")
      constant(value="\",\"severity\":\"")      property(name="syslogseverity")
      constant(value="\",\"facility\":\"")      property(name="syslogfacility")
      constant(value="\",\"severity_label\":\"")   property(name="syslogseverity-text")
      constant(value="\",\"facility_label\":\"")   property(name="syslogfacility-text")
      constant(value="\",\"message\":\"")       property(name="rawmsg" format="json")
      constant(value="\",\"end_msg\":\"")
    constant(value="\"}\n")
}

template(name="linux-json"
  type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")       property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"type\":\"syslog_json")
      constant(value="\",\"tag\":\"")           property(name="syslogtag" format="json")
      constant(value="\",\"relayhost\":\"")     property(name="fromhost")
      constant(value="\",\"relayip\":\"")       property(name="fromhost-ip")
      constant(value="\",\"logsource\":\"")     property(name="source")
      constant(value="\",\"hostname\":\"")      property(name="hostname" caseconversion="lower")
      constant(value="\",\"program\":\"")      property(name="programname")
      constant(value="\",\"username\":\"")      property(name="$!username")
      constant(value="\",\"group\":\"")      property(name="$!group")
      constant(value="\",\"action\":\"")      property(name="$!action")
      constant(value="\",\"uid\":\"")      property(name="$!uid")
      constant(value="\",\"gid\":\"")      property(name="$!gid")
      constant(value="\",\"tty\":\"")      property(name="$!tty")
      constant(value="\",\"pwd\":\"")      property(name="$!pwd")
      constant(value="\",\"dropuser\":\"")      property(name="$!dropuser")
      constant(value="\",\"command\":\"")      property(name="$!command")
      constant(value="\",\"result\":\"")      property(name="$!result")
      constant(value="\",\"homedir\":\"")      property(name="$!homedir")
      constant(value="\",\"shell\":\"")      property(name="$!shell")
      constant(value="\",\"priority\":\"")      property(name="pri")
      constant(value="\",\"severity\":\"")      property(name="syslogseverity")
      constant(value="\",\"facility\":\"")      property(name="syslogfacility")
      constant(value="\",\"severity_label\":\"")   property(name="syslogseverity-text")
      constant(value="\",\"facility_label\":\"")   property(name="syslogfacility-text")
      constant(value="\",\"message\":\"")       property(name="rawmsg" format="json")
      constant(value="\",\"end_msg\":\"")
    constant(value="\"}\n")
}

if $msg contains "IPTABLES-" then {
	action(type="omfile" dirCreateMode="0700" FileCreateMode="0644" File="/var/log/iptables.log")
	action(type="mmnormalize" rulebase="/etc/rsyslog.d/iptables.rules" useRawMsg="on")
	if $parsesuccess == "OK" then {
		action(type="omfile" file="/var/log/iptables.parse_success.log" template="iptables-json")
		action(type="omelasticsearch"
			name="iptables_es"
			server="DOCKER_ELASTIC_IP"
			serverport="9200"
			template="iptables-json"
			searchIndex="iptables-index"
			dynSearchIndex="on"
			bulkmode="on"
			queue.type="linkedlist"
			queue.filename="iptables.rsysq"
			queue.maxdiskspace="20g"
			queue.maxfilesize="2048m"
			queue.saveonshutdown="on"
			action.resumeretrycount="-1"
			)
	} else {
		action(type="omelasticsearch"
                        name="iptables_es"
                        server="DOCKER_ELASTIC_IP"
                        serverport="9200"
                        template="json_syslog"
                        searchIndex="iptables-index"
			searchType="error"
                        dynSearchIndex="on"
                        bulkmode="on"
                        queue.type="linkedlist"
                        queue.filename="iptables.rsysq"
                        queue.maxdiskspace="20g"
                        queue.maxfilesize="2048m"
                        queue.saveonshutdown="on"
                        action.resumeretrycount="-1"
                        )
	}
stop
}

if $rawmsg contains "fail2ban" then {
	action(type="omfile" file="/var/log/fail2ban.log" template="json_syslog")
                action(type="mmnormalize" ruleBase="/etc/rsyslog.d/fail2ban.rules")
                if $parsesuccess == "OK" then
                        action(type="omelasticsearch"
			name="fail2ban_es"
			server="DOCKER_ELASTIC_IP"
			serverport="9200"
			template="fail2ban-json"
			searchIndex="fail2ban-index"
                        dynSearchIndex="on"
			bulkmode="on"
			queue.type="linkedlist"
			queue.filename="fail2ban.rsysq"
			queue.maxdiskspace="20g"
			queue.maxfilesize="2048m"
			queue.saveonshutdown="on"
			action.resumeretrycount="-1"
			)
                else
			action(type="omelasticsearch"
                        name="fail2ban_es"
                        server="DOCKER_ELASTIC_IP"
                        serverport="9200"
                        template="fail2ban-json"
                        searchIndex="fail2ban-index"
			searchType="error"
                        dynSearchIndex="on"
                        bulkmode="on"
                        queue.type="linkedlist"
                        queue.filename="fail2ban.rsysq"
                        queue.maxdiskspace="20g"
                        queue.maxfilesize="2048m"
                        queue.saveonshutdown="on"
                        action.resumeretrycount="-1"
                        )
stop
}

if $msg startswith ' {' and $programname contains 'apache2' then {
                action(type="omelasticsearch"
                        name="apache2_es"
                        server="DOCKER_ELASTIC_IP"
                        serverport="9200"
                        template="MSG"
                        searchIndex="apache2-index"
                        dynSearchIndex="on"
                        bulkmode="on"
                        queue.type="linkedlist"
                        queue.filename="apache2.rsysq"
                        queue.maxdiskspace="20g"
                        queue.maxfilesize="2048m"
                        queue.saveonshutdown="on"
                        action.resumeretrycount="-1"
                        ) stop }

if $programname startswith 'suricata' then {
	action(type="omfile" file="/var/log/suricata.log" template="json_syslog")
	#action(type="omelasticsearch"
	#	name="suricata_es"
	#	server="DOCKER_ELASTIC_IP"
	#	serverport="9200"
	#	template="RAWMSG"
	#	searchIndex="suricata-index"
	#	dynSearchIndex="on"
	#	bulkmode="on"
	#	queue.type="linkedlist"
	#	queue.filename="suricata.rsysq"
	#	queue.maxdiskspace="20g"
	#	queue.maxfilesize="2048m"
	#	queue.saveonshutdown="on"
	#	action.resumeretrycount="-1"
	#)
stop
}

action(type="mmnormalize" ruleBase="/etc/rsyslog.d/auth.rules")
                if $parsesuccess == "OK" then
                        action(type="omelasticsearch"
                        name="linux_es"
                        server="DOCKER_ELASTIC_IP"
                        serverport="9200"
                        template="linux-json"
                        searchIndex="linux-index"
                        dynSearchIndex="on"
                        bulkmode="on"
                        queue.type="linkedlist"
                        queue.filename="linux.rsysq"
                        queue.maxdiskspace="20g"
                        queue.maxfilesize="2048m"
                        queue.saveonshutdown="on"
                        action.resumeretrycount="-1"
                        )
                else
                        action(type="omelasticsearch"
                        name="linux_es"
                        server="DOCKER_ELASTIC_IP"
                        serverport="9200"
                        template="json_syslog"
                        searchIndex="linux-index"
                        searchType="error"
                        dynSearchIndex="on"
                        bulkmode="on"
                        queue.type="linkedlist"
                        queue.filename="linux.rsysq"
                        queue.maxdiskspace="20g"
                        queue.maxfilesize="2048m"
                        queue.saveonshutdown="on"
                        action.resumeretrycount="-1"
                        )




# Uncomment the following to stop logging anything that matches the last rule.
# Doing this will stop logging kernel generated UFW log messages to the file
# normally containing kern.* messages (eg, /var/log/kern.log)
#& stop